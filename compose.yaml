networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}-default-network

services:

  apache:
    container_name: ${COMPOSE_PROJECT_NAME}.apache
    build: './docker/apache'
    networks:
      - default
    depends_on:
      - php-fpm
    ports:
      - "8001:80"
    volumes:
      - ./:/var/www/html/
      - ./docker/apache/vhost.conf:/usr/local/apache2/conf/app.conf
    restart: unless-stopped

  php-fpm:
    container_name: ${COMPOSE_PROJECT_NAME}.php
    build:
      context: .
      dockerfile: './docker/php/Dockerfile'
      args:
        - APP_ENV=${APP_ENV}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      # rabbitmq:
      #   condition: service_started
    networks:
       - default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      PHP_IDE_CONFIG: 'serverName=host.docker.internal'
      XDEBUG_TRIGGER: ${XDEBUG_TRIGGER:-1}
    volumes:
      - ./:/var/www/html/
      - ./docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - ./docker/php/ldap.conf:/etc/openldap/ldap.conf
      - ./docker/php/ldap.conf:/etc/ldap/ldap.conf
    restart: unless-stopped

  database:
    container_name: ${COMPOSE_PROJECT_NAME}.database.postgres
    image: postgres:16.3-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "32769:5432"
    volumes:
     - ./docker/database/data:/var/lib/postgresql/data
    networks:
     - default
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped

#  rabbitmq:
#    image: "rabbitmq:3-management"
#    container_name: ${COMPOSE_PROJECT_NAME}.rabbitmq
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    environment:
#      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
#      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
#      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
##      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="-rabbit disk_free_limit 2147483648"
#    healthcheck:
#      test: rabbitmq-diagnostics -q ping
#      interval: 5s
#      timeout: 5s
#      retries: 3
#    volumes:
#      - ./docker/rabbitmq/data:/var/lib/rabbitmq
#    networks:
#      - default
#    restart: always


#  elasticsearch:
#    container_name: ${COMPOSE_PROJECT_NAME}.elasticsearch
#    # image: docker.elastic.co/elasticsearch/elasticsearch:7.13.2
#    image: elasticsearch:7.17.0
#    ports:
#      - "127.0.0.1:9200:9200"
#      - "9300:9300"
#    environment:
#      # - http.host=0.0.0.0
#      # - transport.host=0.0.0.0
#      - node.name=es01
#      - cluster.name=es-docker-cluster
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - discovery.type=single-node
#    volumes:
#      - ./:/var/www/html/
#      - ./docker/elasticsearch/data:/usr/share/elasticsearch/data
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      # nofile:
#      #   soft: 65536
#      #   hard: 65536
#    mem_limit: 2g
#    networks:
#      - default
#    restart: unless-stopped


#  kibana:
#    container_name: ${COMPOSE_PROJECT_NAME}.kibana
#    image: kibana:7.17.0
#    depends_on:
#      - elasticsearch
#    ports:
#      - "5601:5601"
#    networks:
#      - default
#    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: ${COMPOSE_PROJECT_NAME}.redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - seo-box
    command: ["redis-server", "--requirepass", "$REDIS_PASSWORD"]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
